apply {
  plugin  'java'
  plugin  'war'
  plugin  'jetty'
  plugin  'eclipse'
  plugin  'checkstyle'
  from 'gradle/emma.gradle'
}

if (!hasProperty('env')) {
  env = 'default'
}

envConfig = { ->
  def slurper = new ConfigSlurper()
  def files = files("gradle/default.config.gradle",
                    "gradle/${env}.config.gradle")
  return files.inject(new ConfigObject()) { config, file ->
      file.exists() ? config.merge(slurper.parse(file.toURL())) : config
  }
}();

dependencies {
  runtime fileTree( dir: 'lib/runtime/', include: '*.jar' )
  compile fileTree( dir: 'lib/compile/', include: '*.jar' )
  testCompile fileTree( dir: 'lib/compileTest/', include: '*.jar')
}

dependencies {
  checkstyle fileTree(dir: 'tool/checkstyle/', include: '*.jar')
}

processResources {
  include '**/*.properties'
  expand envConfig
}

build << {
  printApplicationProperties()
}

tasks.withType(Compile) {
  options.encoding = 'UTF-8'
}

port = 9000
jettyRun {
  httpPort = port
  contextPath = '/test'
}

jettyRunWar {
  httpPort = port
  contextPath = '/test'
}

test {
  exclude '**/*UITest.class'
}

task(extraConfig) {
  println 'setting jetty to daemon'
  jettyRunWar.daemon = true
}

task('webTest', type: Test, dependsOn: [clean, build, extraConfig, jettyRunWar]) {
  testReportDir = file("${reportsDir}/webTests")
  include("**/*UITest.class")
}


def printApplicationProperties() {
  println "-- application.properties --"
  println file("build/resources/main/application.properties").text
  println "---------------"
}
